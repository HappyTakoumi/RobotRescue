Connexion Pi:
Lister les adresses IP du sous-réseau : 
sudo nmap -sP 192.168.88.0/24 (penser a modifier le masque pour votre sous-réseaux)
se connecter en ssh :
ssh pi@<a>

Utile:
Copier du PC vers la pi :
scp -r /trucacopiersurlepc pi@<adresse_ip>:/dossier/

mannete pi:
Installation ou mise a jours des drivers => sudo apt-get install xboxdrv
Installation du package joystick => sudo apt-get install joystick
on peux maintenant uiliser ce "fichier" /dev/input/js0 et lire les modifications faite sur les différents boutons.

Code cpp:
Nous avonc repris un code en cpp pour la partie lecture de la manette et envoie des information dans la liasions série.
librairie importante =>
                      #include <fcntl.h>
                      #include <linux/joystick.h> 
objet manette =>
                const char* device = "/dev/input/js0";
                int js = open(device, O_RDONLY);
on vérifier si la manette est déconnectée aves js ==-1
-si oui on quitte le programme
-si non :
evenements manette =>    
                struct js_event event;
on rentre dans un boucle while(1);
  On utilise un switch case pour diférencier les appuie bouton et les déplacements joystick.
  On n'utilise pas les boutons dans notre cas mais un bouton est a associer un nombre pour savoir sur quel bouton on a effectué une action et une valeur 1 = appuyé / 0= relaché
  Pour les joytick on a la meme idée le déplacement en y est lié au nombre 1 et le déplacement enx au nombre 0. 
  On peux donc différencer les deux déplacements et retourner la valeur du déplacements compris entre +/-32767.
  On écrit a la fois dans l'invité de commande en utilisant cout pour vérification et dans la liaision série.
  => cout << "Joystick Y : " << event.value << endl;
  Pour cela on créér un objet qui va indiquer dans sur quel port écrire => std::ofstream monFlux1("std::ofstream monFlux1("/dev/ttyACM1");");
  On peux maintennant écrire sur la liaision série.
  => monFlux1<<"x"<< event.value  << " \r " <<  endl;
  On utilise un timer pour ne pas faire buguer la stm32 =>this_thread::sleep_for(chrono::milliseconds(50));
                

Code Stm32:
Dans un premier temps nous avons configurer un timer pour nous fournir un signal PWM.
Confifurgation = Horloge 80MHz /Prescaler tim1 = 80-1 /Period = 20000-1  ==> Impulsion toutes les 20 ms
Grace à la fonction __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, x) nous pouvons configurer la largeur de l'impulsion avec x en µs et compris entre 1ms(0°) et 2ms(180°)
C'est signaux nous servirons pour le servomoteur et le moteur bruschless.

Nous avons créer un code qui utilise les interuptions sur l'uart pour lire les caractères qui arrivent.
Nous réalisons un traitement sur la chaine de caractères, on vérifie le premier caractère (x ou y) pour savoir si c'est la chaine de caractère est pour la position x ou y 
On place ensuite on reconstuit ensuite la chaine de cacactère que l'on place dans la bonne variable joyX ou joyY.
On envoie cette valeur sur la liaision série pour le lire avec minicom sur la Pi
Après chaque appel de l'interuption, il ne faut pas oublié de rappeler HAL_UART_Receive_IT(&huart1, &pData, 1) pour le prochain caractère.
Pour la position X nous avons créer une fonction ( non opérationnel) pour transformé la position (+/-32767) en un temps de comparaison pour le signal PWM du servomoteur (1250->1650).
Nous avions en effet testé notre servomoteur et rémarqué que pour avoir les roues droite il nous fallait une impulsion de 1450 µs et le min et max (gauche / droite) était d'environs 1250 et 1650.

